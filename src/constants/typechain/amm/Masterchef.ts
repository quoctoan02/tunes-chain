/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common"

export interface MasterchefInterface extends utils.Interface {
  functions: {
    "add(uint256,address)": FunctionFragment
    "deposit(uint256,uint256)": FunctionFragment
    "emergencyWithdraw(uint256)": FunctionFragment
    "massUpdatePools()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "set(uint256,uint256)": FunctionFragment
    "setDevAddress(address)": FunctionFragment
    "setPause(bool)": FunctionFragment
    "setVestingAddress(address)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "updateAccretionRate(uint256)": FunctionFragment
    "updatePool(uint256)": FunctionFragment
    "updateStartBlock(uint256)": FunctionFragment
    "vesting(uint256,address)": FunctionFragment
    "withdraw(uint256,uint256)": FunctionFragment
    "devAddress()": FunctionFragment
    "getMultiplier(uint256,uint256)": FunctionFragment
    "owner()": FunctionFragment
    "paused()": FunctionFragment
    "pendingToken(uint256,address)": FunctionFragment
    "poolExistence(address)": FunctionFragment
    "poolInfo(uint256)": FunctionFragment
    "poolLength()": FunctionFragment
    "startBlock()": FunctionFragment
    "token()": FunctionFragment
    "tokenomic(uint256)": FunctionFragment
    "tokenPerBlock()": FunctionFragment
    "totalAllocPoint()": FunctionFragment
    "userInfo(uint256,address)": FunctionFragment
    "vestingAddress()": FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "deposit"
      | "emergencyWithdraw"
      | "massUpdatePools"
      | "renounceOwnership"
      | "set"
      | "setDevAddress"
      | "setPause"
      | "setVestingAddress"
      | "transferOwnership"
      | "updateAccretionRate"
      | "updatePool"
      | "updateStartBlock"
      | "vesting"
      | "withdraw"
      | "devAddress"
      | "getMultiplier"
      | "owner"
      | "paused"
      | "pendingToken"
      | "poolExistence"
      | "poolInfo"
      | "poolLength"
      | "startBlock"
      | "token"
      | "tokenomic"
      | "tokenPerBlock"
      | "totalAllocPoint"
      | "userInfo"
      | "vestingAddress"
  ): FunctionFragment

  encodeFunctionData(functionFragment: "add", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "emergencyWithdraw", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(
    functionFragment: "set",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "setDevAddress", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "setPause", values: [PromiseOrValue<boolean>]): string
  encodeFunctionData(functionFragment: "setVestingAddress", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "updateAccretionRate", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "updatePool", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "updateStartBlock", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: "vesting",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "devAddress", values?: undefined): string
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "paused", values?: undefined): string
  encodeFunctionData(
    functionFragment: "pendingToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: "poolExistence", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "poolInfo", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "poolLength", values?: undefined): string
  encodeFunctionData(functionFragment: "startBlock", values?: undefined): string
  encodeFunctionData(functionFragment: "token", values?: undefined): string
  encodeFunctionData(functionFragment: "tokenomic", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "tokenPerBlock", values?: undefined): string
  encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: "vestingAddress", values?: undefined): string

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "emergencyWithdraw", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setDevAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setVestingAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateAccretionRate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "updateStartBlock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pendingToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "poolExistence", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenomic", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenPerBlock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vestingAddress", data: BytesLike): Result

  events: {
    "Deposit(address,uint256,uint256)": EventFragment
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "ReferralCommissionPaid(address,address,uint256)": EventFragment
    "SetDevAddress(address,address)": EventFragment
    "UpdateEmissionRate(address,uint256)": EventFragment
    "Vesting(address,uint256,uint256)": EventFragment
    "Withdraw(address,uint256,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "ReferralCommissionPaid"): EventFragment
  getEvent(nameOrSignatureOrTopic: "SetDevAddress"): EventFragment
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Vesting"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment
}

export interface DepositEventObject {
  user: string
  pid: BigNumber
  amount: BigNumber
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface EmergencyWithdrawEventObject {
  user: string
  pid: BigNumber
  amount: BigNumber
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface ReferralCommissionPaidEventObject {
  user: string
  referrer: string
  commissionAmount: BigNumber
}
export type ReferralCommissionPaidEvent = TypedEvent<[string, string, BigNumber], ReferralCommissionPaidEventObject>

export type ReferralCommissionPaidEventFilter = TypedEventFilter<ReferralCommissionPaidEvent>

export interface SetDevAddressEventObject {
  user: string
  newAddress: string
}
export type SetDevAddressEvent = TypedEvent<[string, string], SetDevAddressEventObject>

export type SetDevAddressEventFilter = TypedEventFilter<SetDevAddressEvent>

export interface UpdateEmissionRateEventObject {
  user: string
  tokenPerBlock: BigNumber
}
export type UpdateEmissionRateEvent = TypedEvent<[string, BigNumber], UpdateEmissionRateEventObject>

export type UpdateEmissionRateEventFilter = TypedEventFilter<UpdateEmissionRateEvent>

export interface VestingEventObject {
  user: string
  index: BigNumber
  amount: BigNumber
}
export type VestingEvent = TypedEvent<[string, BigNumber, BigNumber], VestingEventObject>

export type VestingEventFilter = TypedEventFilter<VestingEvent>

export interface WithdrawEventObject {
  user: string
  pid: BigNumber
  amount: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface Masterchef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MasterchefInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDevAddress(
      _devAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setVestingAddress(
      _newVestingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateAccretionRate(
      _tokenPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateStartBlock(
      _startBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    vesting(
      _indexTokenomic: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    devAddress(overrides?: CallOverrides): Promise<[string]>

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    pendingToken(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    poolExistence(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string
        allocPoint: BigNumber
        lastRewardBlock: BigNumber
        accTokenPerShare: BigNumber
      }
    >

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    tokenomic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        firstUnLocktime: BigNumber
        times: BigNumber
        claimed: BigNumber
        cycle: BigNumber
      }
    >

    tokenPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>

    vestingAddress(overrides?: CallOverrides): Promise<[string]>
  }

  add(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deposit(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  emergencyWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setDevAddress(
    _devAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPause(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setVestingAddress(
    _newVestingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateAccretionRate(
    _tokenPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updatePool(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateStartBlock(
    _startBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  vesting(
    _indexTokenomic: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  devAddress(overrides?: CallOverrides): Promise<string>

  getMultiplier(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  pendingToken(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  poolExistence(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string
      allocPoint: BigNumber
      lastRewardBlock: BigNumber
      accTokenPerShare: BigNumber
    }
  >

  poolLength(overrides?: CallOverrides): Promise<BigNumber>

  startBlock(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  tokenomic(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber
      firstUnLocktime: BigNumber
      times: BigNumber
      claimed: BigNumber
      cycle: BigNumber
    }
  >

  tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>

  vestingAddress(overrides?: CallOverrides): Promise<string>

  callStatic: {
    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    emergencyWithdraw(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    massUpdatePools(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setDevAddress(_devAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setPause(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>

    setVestingAddress(_newVestingAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    updateAccretionRate(_tokenPerBlock: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    updatePool(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    updateStartBlock(_startBlock: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    vesting(
      _indexTokenomic: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    devAddress(overrides?: CallOverrides): Promise<string>

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    pendingToken(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    poolExistence(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string
        allocPoint: BigNumber
        lastRewardBlock: BigNumber
        accTokenPerShare: BigNumber
      }
    >

    poolLength(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    tokenomic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        firstUnLocktime: BigNumber
        times: BigNumber
        claimed: BigNumber
        cycle: BigNumber
      }
    >

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>

    vestingAddress(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    "ReferralCommissionPaid(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      commissionAmount?: null
    ): ReferralCommissionPaidEventFilter
    ReferralCommissionPaid(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null,
      commissionAmount?: null
    ): ReferralCommissionPaidEventFilter

    "SetDevAddress(address,address)"(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetDevAddressEventFilter
    SetDevAddress(
      user?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): SetDevAddressEventFilter

    "UpdateEmissionRate(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenPerBlock?: null
    ): UpdateEmissionRateEventFilter
    UpdateEmissionRate(user?: PromiseOrValue<string> | null, tokenPerBlock?: null): UpdateEmissionRateEventFilter

    "Vesting(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): VestingEventFilter
    Vesting(
      user?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): VestingEventFilter

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter
  }

  estimateGas: {
    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setDevAddress(
      _devAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setVestingAddress(
      _newVestingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateAccretionRate(
      _tokenPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateStartBlock(
      _startBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    vesting(
      _indexTokenomic: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    devAddress(overrides?: CallOverrides): Promise<BigNumber>

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    pendingToken(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    poolExistence(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    poolLength(overrides?: CallOverrides): Promise<BigNumber>

    startBlock(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    tokenomic(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    vestingAddress(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setDevAddress(
      _devAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setVestingAddress(
      _newVestingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateAccretionRate(
      _tokenPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateStartBlock(
      _startBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    vesting(
      _indexTokenomic: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingToken(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    poolExistence(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenomic(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    vestingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
