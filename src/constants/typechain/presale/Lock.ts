/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common"

export declare namespace ArbillionLock {
  export type CumulativeLockInfoStruct = {
    token: PromiseOrValue<string>
    factory: PromiseOrValue<string>
    amount: PromiseOrValue<BigNumberish>
  }

  export type CumulativeLockInfoStructOutput = [string, string, BigNumber] & {
    token: string
    factory: string
    amount: BigNumber
  }

  export type LockStruct = {
    id: PromiseOrValue<BigNumberish>
    token: PromiseOrValue<string>
    owner: PromiseOrValue<string>
    amount: PromiseOrValue<BigNumberish>
    lockDate: PromiseOrValue<BigNumberish>
    tgeDate: PromiseOrValue<BigNumberish>
    tgeBps: PromiseOrValue<BigNumberish>
    cycle: PromiseOrValue<BigNumberish>
    cycleBps: PromiseOrValue<BigNumberish>
    unlockedAmount: PromiseOrValue<BigNumberish>
    description: PromiseOrValue<string>
  }

  export type LockStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber
    token: string
    owner: string
    amount: BigNumber
    lockDate: BigNumber
    tgeDate: BigNumber
    tgeBps: BigNumber
    cycle: BigNumber
    cycleBps: BigNumber
    unlockedAmount: BigNumber
    description: string
  }
}

export interface LockInterface extends utils.Interface {
  functions: {
    "allLpTokenLockedCount()": FunctionFragment
    "allNormalTokenLockedCount()": FunctionFragment
    "cumulativeLockInfo(address)": FunctionFragment
    "editLock(uint256,uint256,uint256)": FunctionFragment
    "editLockDescription(uint256,string)": FunctionFragment
    "getCumulativeLpTokenLockInfo(uint256,uint256)": FunctionFragment
    "getCumulativeLpTokenLockInfoAt(uint256)": FunctionFragment
    "getCumulativeNormalTokenLockInfo(uint256,uint256)": FunctionFragment
    "getCumulativeNormalTokenLockInfoAt(uint256)": FunctionFragment
    "getLockAt(uint256)": FunctionFragment
    "getLockById(uint256)": FunctionFragment
    "getLocksForToken(address,uint256,uint256)": FunctionFragment
    "getTotalLockCount()": FunctionFragment
    "lock(address,address,bool,uint256,uint256,string)": FunctionFragment
    "lpLockCountForUser(address)": FunctionFragment
    "lpLockForUserAtIndex(address,uint256)": FunctionFragment
    "lpLocksForUser(address)": FunctionFragment
    "multipleVestingLock(address[],uint256[],address,bool,uint256,uint256,uint256,uint256,string)": FunctionFragment
    "normalLockCountForUser(address)": FunctionFragment
    "normalLockForUserAtIndex(address,uint256)": FunctionFragment
    "normalLocksForUser(address)": FunctionFragment
    "owner()": FunctionFragment
    "renounceLockOwnership(uint256)": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "totalLockCountForToken(address)": FunctionFragment
    "totalLockCountForUser(address)": FunctionFragment
    "totalTokenLockedCount()": FunctionFragment
    "transferLockOwnership(uint256,address)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "unlock(uint256)": FunctionFragment
    "vestingLock(address,address,bool,uint256,uint256,uint256,uint256,uint256,string)": FunctionFragment
    "withdrawableTokens(uint256)": FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | "allLpTokenLockedCount"
      | "allNormalTokenLockedCount"
      | "cumulativeLockInfo"
      | "editLock"
      | "editLockDescription"
      | "getCumulativeLpTokenLockInfo"
      | "getCumulativeLpTokenLockInfoAt"
      | "getCumulativeNormalTokenLockInfo"
      | "getCumulativeNormalTokenLockInfoAt"
      | "getLockAt"
      | "getLockById"
      | "getLocksForToken"
      | "getTotalLockCount"
      | "lock"
      | "lpLockCountForUser"
      | "lpLockForUserAtIndex"
      | "lpLocksForUser"
      | "multipleVestingLock"
      | "normalLockCountForUser"
      | "normalLockForUserAtIndex"
      | "normalLocksForUser"
      | "owner"
      | "renounceLockOwnership"
      | "renounceOwnership"
      | "totalLockCountForToken"
      | "totalLockCountForUser"
      | "totalTokenLockedCount"
      | "transferLockOwnership"
      | "transferOwnership"
      | "unlock"
      | "vestingLock"
      | "withdrawableTokens"
  ): FunctionFragment

  encodeFunctionData(functionFragment: "allLpTokenLockedCount", values?: undefined): string
  encodeFunctionData(functionFragment: "allNormalTokenLockedCount", values?: undefined): string
  encodeFunctionData(functionFragment: "cumulativeLockInfo", values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: "editLock",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "editLockDescription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: "getCumulativeLpTokenLockInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "getCumulativeLpTokenLockInfoAt", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: "getCumulativeNormalTokenLockInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "getCumulativeNormalTokenLockInfoAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "getLockAt", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "getLockById", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: "getLocksForToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "getTotalLockCount", values?: undefined): string
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: "lpLockCountForUser", values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: "lpLockForUserAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "lpLocksForUser", values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: "multipleVestingLock",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: "normalLockCountForUser", values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: "normalLockForUserAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "normalLocksForUser", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceLockOwnership", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "totalLockCountForToken", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "totalLockCountForUser", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "totalTokenLockedCount", values?: undefined): string
  encodeFunctionData(
    functionFragment: "transferLockOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "unlock", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: "vestingLock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: "withdrawableTokens", values: [PromiseOrValue<BigNumberish>]): string

  decodeFunctionResult(functionFragment: "allLpTokenLockedCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "allNormalTokenLockedCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "cumulativeLockInfo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "editLock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "editLockDescription", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCumulativeLpTokenLockInfo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCumulativeLpTokenLockInfoAt", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCumulativeNormalTokenLockInfo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCumulativeNormalTokenLockInfoAt", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getLockAt", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getLockById", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getLocksForToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getTotalLockCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "lpLockCountForUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "lpLockForUserAtIndex", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "lpLocksForUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "multipleVestingLock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "normalLockCountForUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "normalLockForUserAtIndex", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "normalLocksForUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceLockOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalLockCountForToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalLockCountForUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokenLockedCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferLockOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vestingLock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawableTokens", data: BytesLike): Result

  events: {
    "LockAdded(uint256,address,address,uint256,uint256)": EventFragment
    "LockDescriptionChanged(uint256)": EventFragment
    "LockOwnerChanged(uint256,address,address)": EventFragment
    "LockRemoved(uint256,address,address,uint256,uint256)": EventFragment
    "LockUpdated(uint256,address,address,uint256,uint256)": EventFragment
    "LockVested(uint256,address,address,uint256,uint256,uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "LockAdded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockDescriptionChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockOwnerChanged"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockRemoved"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockUpdated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "LockVested"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
}

export interface LockAddedEventObject {
  id: BigNumber
  token: string
  owner: string
  amount: BigNumber
  unlockDate: BigNumber
}
export type LockAddedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber], LockAddedEventObject>

export type LockAddedEventFilter = TypedEventFilter<LockAddedEvent>

export interface LockDescriptionChangedEventObject {
  lockId: BigNumber
}
export type LockDescriptionChangedEvent = TypedEvent<[BigNumber], LockDescriptionChangedEventObject>

export type LockDescriptionChangedEventFilter = TypedEventFilter<LockDescriptionChangedEvent>

export interface LockOwnerChangedEventObject {
  lockId: BigNumber
  owner: string
  newOwner: string
}
export type LockOwnerChangedEvent = TypedEvent<[BigNumber, string, string], LockOwnerChangedEventObject>

export type LockOwnerChangedEventFilter = TypedEventFilter<LockOwnerChangedEvent>

export interface LockRemovedEventObject {
  id: BigNumber
  token: string
  owner: string
  amount: BigNumber
  unlockedAt: BigNumber
}
export type LockRemovedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber], LockRemovedEventObject>

export type LockRemovedEventFilter = TypedEventFilter<LockRemovedEvent>

export interface LockUpdatedEventObject {
  id: BigNumber
  token: string
  owner: string
  newAmount: BigNumber
  newUnlockDate: BigNumber
}
export type LockUpdatedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber], LockUpdatedEventObject>

export type LockUpdatedEventFilter = TypedEventFilter<LockUpdatedEvent>

export interface LockVestedEventObject {
  id: BigNumber
  token: string
  owner: string
  amount: BigNumber
  remaining: BigNumber
  timestamp: BigNumber
}
export type LockVestedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  LockVestedEventObject
>

export type LockVestedEventFilter = TypedEventFilter<LockVestedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface Lock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LockInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    allLpTokenLockedCount(overrides?: CallOverrides): Promise<[BigNumber]>

    allNormalTokenLockedCount(overrides?: CallOverrides): Promise<[BigNumber]>

    cumulativeLockInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string
        factory: string
        amount: BigNumber
      }
    >

    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    editLockDescription(
      lockId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getCumulativeLpTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.CumulativeLockInfoStructOutput[]]>

    getCumulativeLpTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.CumulativeLockInfoStructOutput]>

    getCumulativeNormalTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.CumulativeLockInfoStructOutput[]]>

    getCumulativeNormalTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.CumulativeLockInfoStructOutput]>

    getLockAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[ArbillionLock.LockStructOutput]>

    getLockById(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.LockStructOutput]>

    getLocksForToken(
      token: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.LockStructOutput[]]>

    getTotalLockCount(overrides?: CallOverrides): Promise<[BigNumber]>

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    lpLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    lpLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.LockStructOutput]>

    lpLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[ArbillionLock.LockStructOutput[]]>

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    normalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    normalLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.LockStructOutput]>

    normalLocksForUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ArbillionLock.LockStructOutput[]]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    totalLockCountForToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    totalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    totalTokenLockedCount(overrides?: CallOverrides): Promise<[BigNumber]>

    transferLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawableTokens(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>
  }

  allLpTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

  allNormalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

  cumulativeLockInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string
      factory: string
      amount: BigNumber
    }
  >

  editLock(
    lockId: PromiseOrValue<BigNumberish>,
    newAmount: PromiseOrValue<BigNumberish>,
    newUnlockDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  editLockDescription(
    lockId: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getCumulativeLpTokenLockInfo(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.CumulativeLockInfoStructOutput[]>

  getCumulativeLpTokenLockInfoAt(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.CumulativeLockInfoStructOutput>

  getCumulativeNormalTokenLockInfo(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.CumulativeLockInfoStructOutput[]>

  getCumulativeNormalTokenLockInfoAt(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.CumulativeLockInfoStructOutput>

  getLockAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput>

  getLockById(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput>

  getLocksForToken(
    token: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.LockStructOutput[]>

  getTotalLockCount(overrides?: CallOverrides): Promise<BigNumber>

  lock(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    unlockDate: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  lpLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  lpLockForUserAtIndex(
    user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.LockStructOutput>

  lpLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput[]>

  multipleVestingLock(
    owners: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    tgeDate: PromiseOrValue<BigNumberish>,
    tgeBps: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    cycleBps: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  normalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  normalLockForUserAtIndex(
    user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ArbillionLock.LockStructOutput>

  normalLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput[]>

  owner(overrides?: CallOverrides): Promise<string>

  renounceLockOwnership(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  totalLockCountForToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  totalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  totalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

  transferLockOwnership(
    lockId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unlock(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  vestingLock(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    isLpToken: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    tgeDate: PromiseOrValue<BigNumberish>,
    tgeBps: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    cycleBps: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawableTokens(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    allLpTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    allNormalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    cumulativeLockInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string
        factory: string
        amount: BigNumber
      }
    >

    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    editLockDescription(
      lockId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    getCumulativeLpTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.CumulativeLockInfoStructOutput[]>

    getCumulativeLpTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.CumulativeLockInfoStructOutput>

    getCumulativeNormalTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.CumulativeLockInfoStructOutput[]>

    getCumulativeNormalTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.CumulativeLockInfoStructOutput>

    getLockAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput>

    getLockById(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.LockStructOutput>

    getLocksForToken(
      token: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.LockStructOutput[]>

    getTotalLockCount(overrides?: CallOverrides): Promise<BigNumber>

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lpLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    lpLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.LockStructOutput>

    lpLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ArbillionLock.LockStructOutput[]>

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    normalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    normalLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.LockStructOutput>

    normalLocksForUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ArbillionLock.LockStructOutput[]>

    owner(overrides?: CallOverrides): Promise<string>

    renounceLockOwnership(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    totalLockCountForToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    transferLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    unlock(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawableTokens(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    "LockAdded(uint256,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      unlockDate?: null
    ): LockAddedEventFilter
    LockAdded(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      unlockDate?: null
    ): LockAddedEventFilter

    "LockDescriptionChanged(uint256)"(lockId?: null): LockDescriptionChangedEventFilter
    LockDescriptionChanged(lockId?: null): LockDescriptionChangedEventFilter

    "LockOwnerChanged(uint256,address,address)"(
      lockId?: null,
      owner?: null,
      newOwner?: null
    ): LockOwnerChangedEventFilter
    LockOwnerChanged(lockId?: null, owner?: null, newOwner?: null): LockOwnerChangedEventFilter

    "LockRemoved(uint256,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      unlockedAt?: null
    ): LockRemovedEventFilter
    LockRemoved(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      unlockedAt?: null
    ): LockRemovedEventFilter

    "LockUpdated(uint256,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      newAmount?: null,
      newUnlockDate?: null
    ): LockUpdatedEventFilter
    LockUpdated(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      newAmount?: null,
      newUnlockDate?: null
    ): LockUpdatedEventFilter

    "LockVested(uint256,address,address,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      remaining?: null,
      timestamp?: null
    ): LockVestedEventFilter
    LockVested(
      id?: PromiseOrValue<BigNumberish> | null,
      token?: null,
      owner?: null,
      amount?: null,
      remaining?: null,
      timestamp?: null
    ): LockVestedEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    allLpTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    allNormalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    cumulativeLockInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    editLockDescription(
      lockId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getCumulativeLpTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCumulativeLpTokenLockInfoAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getCumulativeNormalTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCumulativeNormalTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLockAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getLockById(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    getLocksForToken(
      token: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTotalLockCount(overrides?: CallOverrides): Promise<BigNumber>

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    lpLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    lpLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lpLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    normalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    normalLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    normalLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    totalLockCountForToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokenLockedCount(overrides?: CallOverrides): Promise<BigNumber>

    transferLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawableTokens(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    allLpTokenLockedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    allNormalTokenLockedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    cumulativeLockInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    editLock(
      lockId: PromiseOrValue<BigNumberish>,
      newAmount: PromiseOrValue<BigNumberish>,
      newUnlockDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    editLockDescription(
      lockId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getCumulativeLpTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCumulativeLpTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCumulativeNormalTokenLockInfo(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCumulativeNormalTokenLockInfoAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLockAt(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getLockById(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getLocksForToken(
      token: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTotalLockCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      unlockDate: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    lpLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    lpLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lpLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    multipleVestingLock(
      owners: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    normalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    normalLockForUserAtIndex(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    normalLocksForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    totalLockCountForToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalLockCountForUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokenLockedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferLockOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unlock(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    vestingLock(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      isLpToken: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      tgeDate: PromiseOrValue<BigNumberish>,
      tgeBps: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      cycleBps: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawableTokens(lockId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
