/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common"

export interface StandardTokenFactoryInterface extends utils.Interface {
  functions: {
    "create(string,string,uint8,uint256)": FunctionFragment
    "factoryManager()": FunctionFragment
    "feeTo()": FunctionFragment
    "flatFee()": FunctionFragment
    "implementation()": FunctionFragment
    "owner()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "setFeeTo(address)": FunctionFragment
    "setFlatFee(uint256)": FunctionFragment
    "setImplementation(address)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "factoryManager"
      | "feeTo"
      | "flatFee"
      | "implementation"
      | "owner"
      | "renounceOwnership"
      | "setFeeTo"
      | "setFlatFee"
      | "setImplementation"
      | "transferOwnership"
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "factoryManager", values?: undefined): string
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string
  encodeFunctionData(functionFragment: "flatFee", values?: undefined): string
  encodeFunctionData(functionFragment: "implementation", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "setFeeTo", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "setFlatFee", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "setImplementation", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "factoryManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "flatFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setFlatFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setImplementation", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result

  events: {
    "OwnershipTransferred(address,address)": EventFragment
    "TokenCreated(address,address,uint8)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface TokenCreatedEventObject {
  owner: string
  token: string
  tokenType: number
}
export type TokenCreatedEvent = TypedEvent<[string, string, number], TokenCreatedEventObject>

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>

export interface StandardTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: StandardTokenFactoryInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    factoryManager(overrides?: CallOverrides): Promise<[string]>

    feeTo(overrides?: CallOverrides): Promise<[string]>

    flatFee(overrides?: CallOverrides): Promise<[BigNumber]>

    implementation(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setFeeTo(
      feeReceivingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setFlatFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  create(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  factoryManager(overrides?: CallOverrides): Promise<string>

  feeTo(overrides?: CallOverrides): Promise<string>

  flatFee(overrides?: CallOverrides): Promise<BigNumber>

  implementation(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  setFeeTo(
    feeReceivingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setFlatFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setImplementation(
    implementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    factoryManager(overrides?: CallOverrides): Promise<string>

    feeTo(overrides?: CallOverrides): Promise<string>

    flatFee(overrides?: CallOverrides): Promise<BigNumber>

    implementation(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setFeeTo(feeReceivingAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setFlatFee(fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setImplementation(implementation_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    "TokenCreated(address,address,uint8)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      tokenType?: null
    ): TokenCreatedEventFilter
    TokenCreated(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      tokenType?: null
    ): TokenCreatedEventFilter
  }

  estimateGas: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    factoryManager(overrides?: CallOverrides): Promise<BigNumber>

    feeTo(overrides?: CallOverrides): Promise<BigNumber>

    flatFee(overrides?: CallOverrides): Promise<BigNumber>

    implementation(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    setFeeTo(
      feeReceivingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setFlatFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    factoryManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    flatFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    setFeeTo(
      feeReceivingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setFlatFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
