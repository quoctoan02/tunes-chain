/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "../common"

export declare namespace ETHLaunchPadV2 {
  export type UserBoughtAmountStruct = {
    userAddress: PromiseOrValue<string>
    amount: PromiseOrValue<BigNumberish>
  }

  export type UserBoughtAmountStructOutput = [string, BigNumber] & {
    userAddress: string
    amount: BigNumber
  }
}

export declare namespace IETHLaunchPad {
  export type SaleInfoStruct = {
    _saleStartTime: PromiseOrValue<BigNumberish>
    _saleEndTime: PromiseOrValue<BigNumberish>
    _minBuyPerUser: PromiseOrValue<BigNumberish>
    _maxBuyPerUser: PromiseOrValue<BigNumberish>
    _lpReleaseTime: PromiseOrValue<BigNumberish>
    _tgeTimeAfterFinalize: PromiseOrValue<BigNumberish>
    _tgePercent: PromiseOrValue<BigNumberish>
    _cliffTime: PromiseOrValue<BigNumberish>
    _vestingCycle: PromiseOrValue<BigNumberish>
    _vestingCyclePercent: PromiseOrValue<BigNumberish>
    tokenOnSale: PromiseOrValue<string>
    hardCap: PromiseOrValue<BigNumberish>
    softCap: PromiseOrValue<BigNumberish>
    presaleRate: PromiseOrValue<BigNumberish>
    listingRate: PromiseOrValue<BigNumberish>
    liquidityPercent: PromiseOrValue<BigNumberish>
    _ETHFee: PromiseOrValue<BigNumberish>
    refundType: PromiseOrValue<BigNumberish>
    saleState: PromiseOrValue<BigNumberish>
    listingType: PromiseOrValue<BigNumberish>
    launchpadEventBase: PromiseOrValue<string>
    dexRouter: PromiseOrValue<string>
    launchpadLocker: PromiseOrValue<string>
  }

  export type SaleInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    _saleStartTime: BigNumber
    _saleEndTime: BigNumber
    _minBuyPerUser: BigNumber
    _maxBuyPerUser: BigNumber
    _lpReleaseTime: BigNumber
    _tgeTimeAfterFinalize: BigNumber
    _tgePercent: BigNumber
    _cliffTime: BigNumber
    _vestingCycle: BigNumber
    _vestingCyclePercent: BigNumber
    tokenOnSale: string
    hardCap: BigNumber
    softCap: BigNumber
    presaleRate: BigNumber
    listingRate: BigNumber
    liquidityPercent: BigNumber
    _ETHFee: BigNumber
    refundType: BigNumber
    saleState: BigNumber
    listingType: BigNumber
    launchpadEventBase: string
    dexRouter: string
    launchpadLocker: string
  }
}

export interface LaunchpadInterface extends utils.Interface {
  functions: {
    "ABI_VERSION()": FunctionFragment
    "ARBILLION_LOCKER()": FunctionFragment
    "ERC20Interface()": FunctionFragment
    "ETHFee_()": FunctionFragment
    "LPtokenReleaseDate()": FunctionFragment
    "LaunchpadAdmin()": FunctionFragment
    "WETH()": FunctionFragment
    "_liquidityPercent()": FunctionFragment
    "_listingRate()": FunctionFragment
    "_presaleRate()": FunctionFragment
    "_refundType()": FunctionFragment
    "_tokensBill()": FunctionFragment
    "amountBoughtInETH(address)": FunctionFragment
    "buyTokens()": FunctionFragment
    "calculationClaimableToken(address)": FunctionFragment
    "cancelPool()": FunctionFragment
    "claimCancelPoolTokens()": FunctionFragment
    "claimTokens()": FunctionFragment
    "claimedCancelPoolTokens()": FunctionFragment
    "cliffTime()": FunctionFragment
    "emergencyCancelPool()": FunctionFragment
    "emergencyPausePool()": FunctionFragment
    "emergencySafu()": FunctionFragment
    "emergencyUnPausePool()": FunctionFragment
    "feeTo()": FunctionFragment
    "finalize()": FunctionFragment
    "finalizeTime()": FunctionFragment
    "getContributorsBought()": FunctionFragment
    "getSaleType()": FunctionFragment
    "getWhitelist(address)": FunctionFragment
    "getWhitelistAddresses()": FunctionFragment
    "hardCap_wei()": FunctionFragment
    "initialize(address,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address),uint256,address,address)": FunctionFragment
    "listingType()": FunctionFragment
    "maxBuyPerUser()": FunctionFragment
    "minBuyPerUser()": FunctionFragment
    "owner()": FunctionFragment
    "presaleCancelled()": FunctionFragment
    "presaleFinalized()": FunctionFragment
    "presalePaused()": FunctionFragment
    "projectOwner()": FunctionFragment
    "publicTime()": FunctionFragment
    "releaseDateSet()": FunctionFragment
    "removeWhiteListUsers(address[])": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "saleEndTime()": FunctionFragment
    "saleStartTime()": FunctionFragment
    "saleState()": FunctionFragment
    "setLPTokenReleaseTime(uint256)": FunctionFragment
    "setPublicTime(uint256)": FunctionFragment
    "setSaleType(uint256)": FunctionFragment
    "setWhiteListUsers(address[])": FunctionFragment
    "softCap_wei()": FunctionFragment
    "tgePercent()": FunctionFragment
    "tgeTimeAfterFinalize()": FunctionFragment
    "tokenAddress()": FunctionFragment
    "totalETHReceivedInAllUser()": FunctionFragment
    "totalTokenBought(address)": FunctionFragment
    "totalTokenClaimed(address)": FunctionFragment
    "totalTokensBought()": FunctionFragment
    "totalTokensToCreatePresale()": FunctionFragment
    "totalparticipants()": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "uniswapV2Factory()": FunctionFragment
    "uniswapV2Router()": FunctionFragment
    "vestingCycle()": FunctionFragment
    "vestingCyclePercent()": FunctionFragment
    "withdrawContribution()": FunctionFragment
    "withdrawedContribution(address)": FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | "ABI_VERSION"
      | "ARBILLION_LOCKER"
      | "ERC20Interface"
      | "ETHFee_"
      | "LPtokenReleaseDate"
      | "LaunchpadAdmin"
      | "WETH"
      | "_liquidityPercent"
      | "_listingRate"
      | "_presaleRate"
      | "_refundType"
      | "_tokensBill"
      | "amountBoughtInETH"
      | "buyTokens"
      | "calculationClaimableToken"
      | "cancelPool"
      | "claimCancelPoolTokens"
      | "claimTokens"
      | "claimedCancelPoolTokens"
      | "cliffTime"
      | "emergencyCancelPool"
      | "emergencyPausePool"
      | "emergencySafu"
      | "emergencyUnPausePool"
      | "feeTo"
      | "finalize"
      | "finalizeTime"
      | "getContributorsBought"
      | "getSaleType"
      | "getWhitelist"
      | "getWhitelistAddresses"
      | "hardCap_wei"
      | "initialize"
      | "listingType"
      | "maxBuyPerUser"
      | "minBuyPerUser"
      | "owner"
      | "presaleCancelled"
      | "presaleFinalized"
      | "presalePaused"
      | "projectOwner"
      | "publicTime"
      | "releaseDateSet"
      | "removeWhiteListUsers"
      | "renounceOwnership"
      | "saleEndTime"
      | "saleStartTime"
      | "saleState"
      | "setLPTokenReleaseTime"
      | "setPublicTime"
      | "setSaleType"
      | "setWhiteListUsers"
      | "softCap_wei"
      | "tgePercent"
      | "tgeTimeAfterFinalize"
      | "tokenAddress"
      | "totalETHReceivedInAllUser"
      | "totalTokenBought"
      | "totalTokenClaimed"
      | "totalTokensBought"
      | "totalTokensToCreatePresale"
      | "totalparticipants"
      | "transferOwnership"
      | "uniswapV2Factory"
      | "uniswapV2Router"
      | "vestingCycle"
      | "vestingCyclePercent"
      | "withdrawContribution"
      | "withdrawedContribution"
  ): FunctionFragment

  encodeFunctionData(functionFragment: "ABI_VERSION", values?: undefined): string
  encodeFunctionData(functionFragment: "ARBILLION_LOCKER", values?: undefined): string
  encodeFunctionData(functionFragment: "ERC20Interface", values?: undefined): string
  encodeFunctionData(functionFragment: "ETHFee_", values?: undefined): string
  encodeFunctionData(functionFragment: "LPtokenReleaseDate", values?: undefined): string
  encodeFunctionData(functionFragment: "LaunchpadAdmin", values?: undefined): string
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string
  encodeFunctionData(functionFragment: "_liquidityPercent", values?: undefined): string
  encodeFunctionData(functionFragment: "_listingRate", values?: undefined): string
  encodeFunctionData(functionFragment: "_presaleRate", values?: undefined): string
  encodeFunctionData(functionFragment: "_refundType", values?: undefined): string
  encodeFunctionData(functionFragment: "_tokensBill", values?: undefined): string
  encodeFunctionData(functionFragment: "amountBoughtInETH", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string
  encodeFunctionData(functionFragment: "calculationClaimableToken", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "cancelPool", values?: undefined): string
  encodeFunctionData(functionFragment: "claimCancelPoolTokens", values?: undefined): string
  encodeFunctionData(functionFragment: "claimTokens", values?: undefined): string
  encodeFunctionData(functionFragment: "claimedCancelPoolTokens", values?: undefined): string
  encodeFunctionData(functionFragment: "cliffTime", values?: undefined): string
  encodeFunctionData(functionFragment: "emergencyCancelPool", values?: undefined): string
  encodeFunctionData(functionFragment: "emergencyPausePool", values?: undefined): string
  encodeFunctionData(functionFragment: "emergencySafu", values?: undefined): string
  encodeFunctionData(functionFragment: "emergencyUnPausePool", values?: undefined): string
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string
  encodeFunctionData(functionFragment: "finalizeTime", values?: undefined): string
  encodeFunctionData(functionFragment: "getContributorsBought", values?: undefined): string
  encodeFunctionData(functionFragment: "getSaleType", values?: undefined): string
  encodeFunctionData(functionFragment: "getWhitelist", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "getWhitelistAddresses", values?: undefined): string
  encodeFunctionData(functionFragment: "hardCap_wei", values?: undefined): string
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IETHLaunchPad.SaleInfoStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(functionFragment: "listingType", values?: undefined): string
  encodeFunctionData(functionFragment: "maxBuyPerUser", values?: undefined): string
  encodeFunctionData(functionFragment: "minBuyPerUser", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "presaleCancelled", values?: undefined): string
  encodeFunctionData(functionFragment: "presaleFinalized", values?: undefined): string
  encodeFunctionData(functionFragment: "presalePaused", values?: undefined): string
  encodeFunctionData(functionFragment: "projectOwner", values?: undefined): string
  encodeFunctionData(functionFragment: "publicTime", values?: undefined): string
  encodeFunctionData(functionFragment: "releaseDateSet", values?: undefined): string
  encodeFunctionData(functionFragment: "removeWhiteListUsers", values: [PromiseOrValue<string>[]]): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "saleEndTime", values?: undefined): string
  encodeFunctionData(functionFragment: "saleStartTime", values?: undefined): string
  encodeFunctionData(functionFragment: "saleState", values?: undefined): string
  encodeFunctionData(functionFragment: "setLPTokenReleaseTime", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "setPublicTime", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "setSaleType", values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: "setWhiteListUsers", values: [PromiseOrValue<string>[]]): string
  encodeFunctionData(functionFragment: "softCap_wei", values?: undefined): string
  encodeFunctionData(functionFragment: "tgePercent", values?: undefined): string
  encodeFunctionData(functionFragment: "tgeTimeAfterFinalize", values?: undefined): string
  encodeFunctionData(functionFragment: "tokenAddress", values?: undefined): string
  encodeFunctionData(functionFragment: "totalETHReceivedInAllUser", values?: undefined): string
  encodeFunctionData(functionFragment: "totalTokenBought", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "totalTokenClaimed", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "totalTokensBought", values?: undefined): string
  encodeFunctionData(functionFragment: "totalTokensToCreatePresale", values?: undefined): string
  encodeFunctionData(functionFragment: "totalparticipants", values?: undefined): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: "uniswapV2Factory", values?: undefined): string
  encodeFunctionData(functionFragment: "uniswapV2Router", values?: undefined): string
  encodeFunctionData(functionFragment: "vestingCycle", values?: undefined): string
  encodeFunctionData(functionFragment: "vestingCyclePercent", values?: undefined): string
  encodeFunctionData(functionFragment: "withdrawContribution", values?: undefined): string
  encodeFunctionData(functionFragment: "withdrawedContribution", values: [PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: "ABI_VERSION", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ARBILLION_LOCKER", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ERC20Interface", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "ETHFee_", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "LPtokenReleaseDate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "LaunchpadAdmin", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_liquidityPercent", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_listingRate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_presaleRate", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_refundType", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "_tokensBill", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "amountBoughtInETH", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "calculationClaimableToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "cancelPool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimCancelPoolTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimedCancelPoolTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "cliffTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "emergencyCancelPool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "emergencyPausePool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "emergencySafu", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "emergencyUnPausePool", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "finalizeTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getContributorsBought", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getSaleType", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getWhitelist", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getWhitelistAddresses", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "hardCap_wei", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "listingType", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "maxBuyPerUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "minBuyPerUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "presaleCancelled", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "presaleFinalized", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "presalePaused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "projectOwner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "publicTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "releaseDateSet", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "removeWhiteListUsers", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "saleEndTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "saleStartTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "saleState", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setLPTokenReleaseTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setPublicTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setSaleType", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setWhiteListUsers", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "softCap_wei", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tgePercent", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tgeTimeAfterFinalize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "tokenAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalETHReceivedInAllUser", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokenBought", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokenClaimed", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokensBought", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalTokensToCreatePresale", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalparticipants", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "uniswapV2Factory", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "uniswapV2Router", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vestingCycle", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vestingCyclePercent", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawContribution", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawedContribution", data: BytesLike): Result

  events: {
    "Initialized(uint8)": EventFragment
    "Log(uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
}

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface LogEventObject {
  gas: BigNumber
}
export type LogEvent = TypedEvent<[BigNumber], LogEventObject>

export type LogEventFilter = TypedEventFilter<LogEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface Launchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LaunchpadInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    ABI_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>

    ARBILLION_LOCKER(overrides?: CallOverrides): Promise<[string]>

    ERC20Interface(overrides?: CallOverrides): Promise<[string]>

    ETHFee_(overrides?: CallOverrides): Promise<[BigNumber]>

    LPtokenReleaseDate(overrides?: CallOverrides): Promise<[BigNumber]>

    LaunchpadAdmin(overrides?: CallOverrides): Promise<[string]>

    WETH(overrides?: CallOverrides): Promise<[string]>

    _liquidityPercent(overrides?: CallOverrides): Promise<[BigNumber]>

    _listingRate(overrides?: CallOverrides): Promise<[BigNumber]>

    _presaleRate(overrides?: CallOverrides): Promise<[BigNumber]>

    _refundType(overrides?: CallOverrides): Promise<[BigNumber]>

    _tokensBill(overrides?: CallOverrides): Promise<[BigNumber]>

    amountBoughtInETH(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    buyTokens(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    calculationClaimableToken(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    cancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    claimCancelPoolTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    claimTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    claimedCancelPoolTokens(overrides?: CallOverrides): Promise<[boolean]>

    cliffTime(overrides?: CallOverrides): Promise<[BigNumber]>

    emergencyCancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    emergencyPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    emergencySafu(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    emergencyUnPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    feeTo(overrides?: CallOverrides): Promise<[string]>

    finalize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    finalizeTime(overrides?: CallOverrides): Promise<[BigNumber]>

    getContributorsBought(overrides?: CallOverrides): Promise<[ETHLaunchPadV2.UserBoughtAmountStructOutput[]]>

    getSaleType(overrides?: CallOverrides): Promise<[number]>

    getWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    getWhitelistAddresses(overrides?: CallOverrides): Promise<[string[]]>

    hardCap_wei(overrides?: CallOverrides): Promise<[BigNumber]>

    initialize(
      _owner_: PromiseOrValue<string>,
      tokensNeeded_wei: PromiseOrValue<BigNumberish>,
      compressedInfo: IETHLaunchPad.SaleInfoStruct,
      tokensBill: PromiseOrValue<BigNumberish>,
      _feeTo: PromiseOrValue<string>,
      _LaunchpadAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    listingType(overrides?: CallOverrides): Promise<[BigNumber]>

    maxBuyPerUser(overrides?: CallOverrides): Promise<[BigNumber]>

    minBuyPerUser(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    presaleCancelled(overrides?: CallOverrides): Promise<[boolean]>

    presaleFinalized(overrides?: CallOverrides): Promise<[boolean]>

    presalePaused(overrides?: CallOverrides): Promise<[boolean]>

    projectOwner(overrides?: CallOverrides): Promise<[string]>

    publicTime(overrides?: CallOverrides): Promise<[BigNumber]>

    releaseDateSet(overrides?: CallOverrides): Promise<[boolean]>

    removeWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    saleEndTime(overrides?: CallOverrides): Promise<[BigNumber]>

    saleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>

    saleState(overrides?: CallOverrides): Promise<[number]>

    setLPTokenReleaseTime(
      lpReleaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPublicTime(
      _publicTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSaleType(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    softCap_wei(overrides?: CallOverrides): Promise<[BigNumber]>

    tgePercent(overrides?: CallOverrides): Promise<[BigNumber]>

    tgeTimeAfterFinalize(overrides?: CallOverrides): Promise<[BigNumber]>

    tokenAddress(overrides?: CallOverrides): Promise<[string]>

    totalETHReceivedInAllUser(overrides?: CallOverrides): Promise<[BigNumber]>

    totalTokenBought(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    totalTokenClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    totalTokensBought(overrides?: CallOverrides): Promise<[BigNumber]>

    totalTokensToCreatePresale(overrides?: CallOverrides): Promise<[BigNumber]>

    totalparticipants(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    uniswapV2Factory(overrides?: CallOverrides): Promise<[string]>

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>

    vestingCycle(overrides?: CallOverrides): Promise<[BigNumber]>

    vestingCyclePercent(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    withdrawedContribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>
  }

  ABI_VERSION(overrides?: CallOverrides): Promise<BigNumber>

  ARBILLION_LOCKER(overrides?: CallOverrides): Promise<string>

  ERC20Interface(overrides?: CallOverrides): Promise<string>

  ETHFee_(overrides?: CallOverrides): Promise<BigNumber>

  LPtokenReleaseDate(overrides?: CallOverrides): Promise<BigNumber>

  LaunchpadAdmin(overrides?: CallOverrides): Promise<string>

  WETH(overrides?: CallOverrides): Promise<string>

  _liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>

  _listingRate(overrides?: CallOverrides): Promise<BigNumber>

  _presaleRate(overrides?: CallOverrides): Promise<BigNumber>

  _refundType(overrides?: CallOverrides): Promise<BigNumber>

  _tokensBill(overrides?: CallOverrides): Promise<BigNumber>

  amountBoughtInETH(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  buyTokens(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  calculationClaimableToken(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  cancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  claimCancelPoolTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  claimTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  claimedCancelPoolTokens(overrides?: CallOverrides): Promise<boolean>

  cliffTime(overrides?: CallOverrides): Promise<BigNumber>

  emergencyCancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  emergencyPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  emergencySafu(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  emergencyUnPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  feeTo(overrides?: CallOverrides): Promise<string>

  finalize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  finalizeTime(overrides?: CallOverrides): Promise<BigNumber>

  getContributorsBought(overrides?: CallOverrides): Promise<ETHLaunchPadV2.UserBoughtAmountStructOutput[]>

  getSaleType(overrides?: CallOverrides): Promise<number>

  getWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  getWhitelistAddresses(overrides?: CallOverrides): Promise<string[]>

  hardCap_wei(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _owner_: PromiseOrValue<string>,
    tokensNeeded_wei: PromiseOrValue<BigNumberish>,
    compressedInfo: IETHLaunchPad.SaleInfoStruct,
    tokensBill: PromiseOrValue<BigNumberish>,
    _feeTo: PromiseOrValue<string>,
    _LaunchpadAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  listingType(overrides?: CallOverrides): Promise<BigNumber>

  maxBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

  minBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  presaleCancelled(overrides?: CallOverrides): Promise<boolean>

  presaleFinalized(overrides?: CallOverrides): Promise<boolean>

  presalePaused(overrides?: CallOverrides): Promise<boolean>

  projectOwner(overrides?: CallOverrides): Promise<string>

  publicTime(overrides?: CallOverrides): Promise<BigNumber>

  releaseDateSet(overrides?: CallOverrides): Promise<boolean>

  removeWhiteListUsers(
    _address: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  saleEndTime(overrides?: CallOverrides): Promise<BigNumber>

  saleStartTime(overrides?: CallOverrides): Promise<BigNumber>

  saleState(overrides?: CallOverrides): Promise<number>

  setLPTokenReleaseTime(
    lpReleaseDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPublicTime(
    _publicTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setSaleType(
    choice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setWhiteListUsers(
    _address: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  softCap_wei(overrides?: CallOverrides): Promise<BigNumber>

  tgePercent(overrides?: CallOverrides): Promise<BigNumber>

  tgeTimeAfterFinalize(overrides?: CallOverrides): Promise<BigNumber>

  tokenAddress(overrides?: CallOverrides): Promise<string>

  totalETHReceivedInAllUser(overrides?: CallOverrides): Promise<BigNumber>

  totalTokenBought(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  totalTokenClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  totalTokensBought(overrides?: CallOverrides): Promise<BigNumber>

  totalTokensToCreatePresale(overrides?: CallOverrides): Promise<BigNumber>

  totalparticipants(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  uniswapV2Factory(overrides?: CallOverrides): Promise<string>

  uniswapV2Router(overrides?: CallOverrides): Promise<string>

  vestingCycle(overrides?: CallOverrides): Promise<BigNumber>

  vestingCyclePercent(overrides?: CallOverrides): Promise<BigNumber>

  withdrawContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  withdrawedContribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    ABI_VERSION(overrides?: CallOverrides): Promise<BigNumber>

    ARBILLION_LOCKER(overrides?: CallOverrides): Promise<string>

    ERC20Interface(overrides?: CallOverrides): Promise<string>

    ETHFee_(overrides?: CallOverrides): Promise<BigNumber>

    LPtokenReleaseDate(overrides?: CallOverrides): Promise<BigNumber>

    LaunchpadAdmin(overrides?: CallOverrides): Promise<string>

    WETH(overrides?: CallOverrides): Promise<string>

    _liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>

    _listingRate(overrides?: CallOverrides): Promise<BigNumber>

    _presaleRate(overrides?: CallOverrides): Promise<BigNumber>

    _refundType(overrides?: CallOverrides): Promise<BigNumber>

    _tokensBill(overrides?: CallOverrides): Promise<BigNumber>

    amountBoughtInETH(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    buyTokens(overrides?: CallOverrides): Promise<void>

    calculationClaimableToken(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    cancelPool(overrides?: CallOverrides): Promise<void>

    claimCancelPoolTokens(overrides?: CallOverrides): Promise<void>

    claimTokens(overrides?: CallOverrides): Promise<void>

    claimedCancelPoolTokens(overrides?: CallOverrides): Promise<boolean>

    cliffTime(overrides?: CallOverrides): Promise<BigNumber>

    emergencyCancelPool(overrides?: CallOverrides): Promise<void>

    emergencyPausePool(overrides?: CallOverrides): Promise<void>

    emergencySafu(overrides?: CallOverrides): Promise<void>

    emergencyUnPausePool(overrides?: CallOverrides): Promise<void>

    feeTo(overrides?: CallOverrides): Promise<string>

    finalize(overrides?: CallOverrides): Promise<void>

    finalizeTime(overrides?: CallOverrides): Promise<BigNumber>

    getContributorsBought(overrides?: CallOverrides): Promise<ETHLaunchPadV2.UserBoughtAmountStructOutput[]>

    getSaleType(overrides?: CallOverrides): Promise<number>

    getWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    getWhitelistAddresses(overrides?: CallOverrides): Promise<string[]>

    hardCap_wei(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _owner_: PromiseOrValue<string>,
      tokensNeeded_wei: PromiseOrValue<BigNumberish>,
      compressedInfo: IETHLaunchPad.SaleInfoStruct,
      tokensBill: PromiseOrValue<BigNumberish>,
      _feeTo: PromiseOrValue<string>,
      _LaunchpadAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    listingType(overrides?: CallOverrides): Promise<BigNumber>

    maxBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

    minBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    presaleCancelled(overrides?: CallOverrides): Promise<boolean>

    presaleFinalized(overrides?: CallOverrides): Promise<boolean>

    presalePaused(overrides?: CallOverrides): Promise<boolean>

    projectOwner(overrides?: CallOverrides): Promise<string>

    publicTime(overrides?: CallOverrides): Promise<BigNumber>

    releaseDateSet(overrides?: CallOverrides): Promise<boolean>

    removeWhiteListUsers(_address: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    saleEndTime(overrides?: CallOverrides): Promise<BigNumber>

    saleStartTime(overrides?: CallOverrides): Promise<BigNumber>

    saleState(overrides?: CallOverrides): Promise<number>

    setLPTokenReleaseTime(lpReleaseDate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setPublicTime(_publicTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setSaleType(choice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setWhiteListUsers(_address: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>

    softCap_wei(overrides?: CallOverrides): Promise<BigNumber>

    tgePercent(overrides?: CallOverrides): Promise<BigNumber>

    tgeTimeAfterFinalize(overrides?: CallOverrides): Promise<BigNumber>

    tokenAddress(overrides?: CallOverrides): Promise<string>

    totalETHReceivedInAllUser(overrides?: CallOverrides): Promise<BigNumber>

    totalTokenBought(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokenClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokensBought(overrides?: CallOverrides): Promise<BigNumber>

    totalTokensToCreatePresale(overrides?: CallOverrides): Promise<BigNumber>

    totalparticipants(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    uniswapV2Factory(overrides?: CallOverrides): Promise<string>

    uniswapV2Router(overrides?: CallOverrides): Promise<string>

    vestingCycle(overrides?: CallOverrides): Promise<BigNumber>

    vestingCyclePercent(overrides?: CallOverrides): Promise<BigNumber>

    withdrawContribution(overrides?: CallOverrides): Promise<void>

    withdrawedContribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    "Log(uint256)"(gas?: null): LogEventFilter
    Log(gas?: null): LogEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    ABI_VERSION(overrides?: CallOverrides): Promise<BigNumber>

    ARBILLION_LOCKER(overrides?: CallOverrides): Promise<BigNumber>

    ERC20Interface(overrides?: CallOverrides): Promise<BigNumber>

    ETHFee_(overrides?: CallOverrides): Promise<BigNumber>

    LPtokenReleaseDate(overrides?: CallOverrides): Promise<BigNumber>

    LaunchpadAdmin(overrides?: CallOverrides): Promise<BigNumber>

    WETH(overrides?: CallOverrides): Promise<BigNumber>

    _liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>

    _listingRate(overrides?: CallOverrides): Promise<BigNumber>

    _presaleRate(overrides?: CallOverrides): Promise<BigNumber>

    _refundType(overrides?: CallOverrides): Promise<BigNumber>

    _tokensBill(overrides?: CallOverrides): Promise<BigNumber>

    amountBoughtInETH(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    buyTokens(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    calculationClaimableToken(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    cancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    claimCancelPoolTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    claimTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    claimedCancelPoolTokens(overrides?: CallOverrides): Promise<BigNumber>

    cliffTime(overrides?: CallOverrides): Promise<BigNumber>

    emergencyCancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    emergencyPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    emergencySafu(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    emergencyUnPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    feeTo(overrides?: CallOverrides): Promise<BigNumber>

    finalize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    finalizeTime(overrides?: CallOverrides): Promise<BigNumber>

    getContributorsBought(overrides?: CallOverrides): Promise<BigNumber>

    getSaleType(overrides?: CallOverrides): Promise<BigNumber>

    getWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getWhitelistAddresses(overrides?: CallOverrides): Promise<BigNumber>

    hardCap_wei(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _owner_: PromiseOrValue<string>,
      tokensNeeded_wei: PromiseOrValue<BigNumberish>,
      compressedInfo: IETHLaunchPad.SaleInfoStruct,
      tokensBill: PromiseOrValue<BigNumberish>,
      _feeTo: PromiseOrValue<string>,
      _LaunchpadAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    listingType(overrides?: CallOverrides): Promise<BigNumber>

    maxBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

    minBuyPerUser(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    presaleCancelled(overrides?: CallOverrides): Promise<BigNumber>

    presaleFinalized(overrides?: CallOverrides): Promise<BigNumber>

    presalePaused(overrides?: CallOverrides): Promise<BigNumber>

    projectOwner(overrides?: CallOverrides): Promise<BigNumber>

    publicTime(overrides?: CallOverrides): Promise<BigNumber>

    releaseDateSet(overrides?: CallOverrides): Promise<BigNumber>

    removeWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    saleEndTime(overrides?: CallOverrides): Promise<BigNumber>

    saleStartTime(overrides?: CallOverrides): Promise<BigNumber>

    saleState(overrides?: CallOverrides): Promise<BigNumber>

    setLPTokenReleaseTime(
      lpReleaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPublicTime(
      _publicTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setSaleType(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    softCap_wei(overrides?: CallOverrides): Promise<BigNumber>

    tgePercent(overrides?: CallOverrides): Promise<BigNumber>

    tgeTimeAfterFinalize(overrides?: CallOverrides): Promise<BigNumber>

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>

    totalETHReceivedInAllUser(overrides?: CallOverrides): Promise<BigNumber>

    totalTokenBought(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokenClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalTokensBought(overrides?: CallOverrides): Promise<BigNumber>

    totalTokensToCreatePresale(overrides?: CallOverrides): Promise<BigNumber>

    totalparticipants(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    uniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>

    vestingCycle(overrides?: CallOverrides): Promise<BigNumber>

    vestingCyclePercent(overrides?: CallOverrides): Promise<BigNumber>

    withdrawContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    withdrawedContribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    ABI_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ARBILLION_LOCKER(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ERC20Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ETHFee_(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LPtokenReleaseDate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LaunchpadAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _liquidityPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _listingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _presaleRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _refundType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _tokensBill(overrides?: CallOverrides): Promise<PopulatedTransaction>

    amountBoughtInETH(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyTokens(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    calculationClaimableToken(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    cancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    claimCancelPoolTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    claimTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    claimedCancelPoolTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>

    cliffTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    emergencyCancelPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    emergencyPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    emergencySafu(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    emergencyUnPausePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    finalize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    finalizeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getContributorsBought(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSaleType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWhitelistAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>

    hardCap_wei(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _owner_: PromiseOrValue<string>,
      tokensNeeded_wei: PromiseOrValue<BigNumberish>,
      compressedInfo: IETHLaunchPad.SaleInfoStruct,
      tokensBill: PromiseOrValue<BigNumberish>,
      _feeTo: PromiseOrValue<string>,
      _LaunchpadAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    listingType(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxBuyPerUser(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minBuyPerUser(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    presaleCancelled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    presaleFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>

    presalePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    projectOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    publicTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    releaseDateSet(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    saleEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    saleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    saleState(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setLPTokenReleaseTime(
      lpReleaseDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPublicTime(
      _publicTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setSaleType(
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setWhiteListUsers(
      _address: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    softCap_wei(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tgePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tgeTimeAfterFinalize(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalETHReceivedInAllUser(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokenBought(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokenClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokensBought(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalTokensToCreatePresale(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalparticipants(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    uniswapV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>

    vestingCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    vestingCyclePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawContribution(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    withdrawedContribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
